import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { MapPin, Clock, Route, Fuel, Leaf, CheckCircle, XCircle, Navigation } from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface Booking {\n  id: string;\n  booking_number: string;\n  location: string;\n  latitude: number;\n  longitude: number;\n  scheduled_time: string;\n  estimated_duration: number;\n  shoot_category: string;\n}\n\ninterface RouteOptimization {\n  optimizationId: string;\n  originalRoute: {\n    bookings: Booking[];\n    totalDistance: number;\n    totalDuration: number;\n    estimatedFuelCost: number;\n  };\n  optimizedRoute: {\n    bookings: Booking[];\n    totalDistance: number;\n    totalDuration: number;\n    estimatedFuelCost: number;\n  };\n  savings: {\n    timeSaved: number;\n    timeSavedMinutes: number;\n    distanceSaved: number;\n    distanceSavedMiles: number;\n    fuelSavings: {\n      gallons: string;\n      dollars: string;\n    };\n    carbonSavings: {\n      pounds: string;\n      kg: string;\n    };\n  };\n  clusters: Array<{\n    id: number;\n    bookings: Booking[];\n    centerLat: number;\n    centerLng: number;\n    radius: number;\n  }>;\n  recommendedStartTime: string;\n}\n\ninterface OptimizationSuggestion {\n  id: string;\n  optimization_date: string;\n  time_saved: number;\n  distance_saved: number;\n  booking_count: number;\n  status: 'pending' | 'accepted' | 'rejected';\n  created_at: string;\n}\n\nexport function RouteOptimizer() {\n  const [optimizations, setOptimizations] = useState<OptimizationSuggestion[]>([]);\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n  const [selectedBookings, setSelectedBookings] = useState<string[]>([]);\n  const [availableBookings, setAvailableBookings] = useState<Booking[]>([]);\n  const [optimizationResult, setOptimizationResult] = useState<RouteOptimization | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [optimizing, setOptimizing] = useState(false);\n\n  useEffect(() => {\n    fetchOptimizationSuggestions();\n  }, []);\n\n  useEffect(() => {\n    if (selectedDate) {\n      fetchBookingsForDate(selectedDate);\n    }\n  }, [selectedDate]);\n\n  const fetchOptimizationSuggestions = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/analytics/optimization/suggestions', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setOptimizations(data.data);\n      }\n    } catch (error) {\n      console.error('Failed to fetch optimization suggestions:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchBookingsForDate = async (date: string) => {\n    try {\n      const response = await fetch(`/api/bookings?date=${date}&status=approved`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        // Filter bookings that have location coordinates\n        const bookingsWithCoords = data.data.filter((booking: Booking) => \n          booking.latitude && booking.longitude\n        );\n        setAvailableBookings(bookingsWithCoords);\n      }\n    } catch (error) {\n      console.error('Failed to fetch bookings:', error);\n    }\n  };\n\n  const optimizeRoute = async () => {\n    if (selectedBookings.length < 2) {\n      toast.error('Please select at least 2 bookings to optimize');\n      return;\n    }\n\n    try {\n      setOptimizing(true);\n      const response = await fetch('/api/maps/optimize-route', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify({\n          bookingIds: selectedBookings,\n          optimizeFor: 'time'\n        }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setOptimizationResult(data.data);\n        toast.success('Route optimization completed!');\n      } else {\n        toast.error('Failed to optimize route');\n      }\n    } catch (error) {\n      console.error('Route optimization error:', error);\n      toast.error('Route optimization failed');\n    } finally {\n      setOptimizing(false);\n    }\n  };\n\n  const acceptOptimization = async (optimizationId: string) => {\n    try {\n      const response = await fetch(`/api/maps/accept-optimization/${optimizationId}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        toast.success('Route optimization accepted and applied!');\n        fetchOptimizationSuggestions();\n        setOptimizationResult(null);\n      } else {\n        toast.error('Failed to accept optimization');\n      }\n    } catch (error) {\n      console.error('Accept optimization error:', error);\n      toast.error('Failed to accept optimization');\n    }\n  };\n\n  const formatTime = (minutes: number) => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;\n  };\n\n  const formatDistance = (meters: number) => {\n    const miles = meters * 0.000621371;\n    return `${miles.toFixed(1)} miles`;\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight\">Route Optimizer</h1>\n          <p className=\"text-muted-foreground\">\n            AI-powered route optimization for efficient scheduling\n          </p>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"suggestions\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"suggestions\">Optimization Suggestions</TabsTrigger>\n          <TabsTrigger value=\"create\">Create Optimization</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Route Analytics</TabsTrigger>\n        </TabsList>\n\n        {/* Optimization Suggestions */}\n        <TabsContent value=\"suggestions\" className=\"space-y-4\">\n          {loading ? (\n            <div className=\"flex items-center justify-center p-8\">\n              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n              <span className=\"ml-2\">Loading suggestions...</span>\n            </div>\n          ) : optimizations.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center p-8\">\n                <Route className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <p className=\"text-muted-foreground\">No optimization suggestions available</p>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  Create some bookings to see route optimization opportunities\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-4\">\n              {optimizations.map((suggestion) => (\n                <Card key={suggestion.id}>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <CardTitle className=\"text-lg\">\n                          Route for {new Date(suggestion.optimization_date).toLocaleDateString()}\n                        </CardTitle>\n                        <CardDescription>\n                          {suggestion.booking_count} bookings â€¢ Created {new Date(suggestion.created_at).toLocaleDateString()}\n                        </CardDescription>\n                      </div>\n                      <Badge \n                        variant={suggestion.status === 'pending' ? 'default' : \n                               suggestion.status === 'accepted' ? 'secondary' : 'destructive'}\n                      >\n                        {suggestion.status}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                        <div>\n                          <div className=\"font-medium\">{suggestion.time_saved} minutes saved</div>\n                          <div className=\"text-sm text-muted-foreground\">Time optimization</div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                        <div>\n                          <div className=\"font-medium\">{suggestion.distance_saved} miles saved</div>\n                          <div className=\"text-sm text-muted-foreground\">Distance reduction</div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Fuel className=\"h-4 w-4 text-muted-foreground\" />\n                        <div>\n                          <div className=\"font-medium\">~${(suggestion.distance_saved * 0.25).toFixed(2)} saved</div>\n                          <div className=\"text-sm text-muted-foreground\">Estimated fuel savings</div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {suggestion.status === 'pending' && (\n                      <div className=\"flex items-center space-x-2\">\n                        <Button \n                          onClick={() => acceptOptimization(suggestion.id)}\n                          size=\"sm\"\n                        >\n                          <CheckCircle className=\"h-4 w-4 mr-2\" />\n                          Accept Optimization\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                        >\n                          <XCircle className=\"h-4 w-4 mr-2\" />\n                          Decline\n                        </Button>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        {/* Create Optimization */}\n        <TabsContent value=\"create\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Create Route Optimization</CardTitle>\n              <CardDescription>\n                Select bookings for a specific date to generate an optimized route\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"date\">Select Date</Label>\n                <Input\n                  id=\"date\"\n                  type=\"date\"\n                  value={selectedDate}\n                  onChange={(e) => setSelectedDate(e.target.value)}\n                  min={new Date().toISOString().split('T')[0]}\n                />\n              </div>\n\n              {availableBookings.length > 0 && (\n                <div>\n                  <Label>Select Bookings to Optimize</Label>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 mt-2\">\n                    {availableBookings.map((booking) => (\n                      <div\n                        key={booking.id}\n                        className={`p-3 border rounded-lg cursor-pointer transition-colors ${\n                          selectedBookings.includes(booking.id) \n                            ? 'border-primary bg-primary/5' \n                            : 'border-border hover:border-primary/50'\n                        }`}\n                        onClick={() => {\n                          setSelectedBookings(prev => \n                            prev.includes(booking.id)\n                              ? prev.filter(id => id !== booking.id)\n                              : [...prev, booking.id]\n                          );\n                        }}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <div className=\"font-medium\">{booking.booking_number}</div>\n                            <div className=\"text-sm text-muted-foreground\">{booking.location}</div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {booking.scheduled_time} â€¢ {booking.shoot_category}\n                            </div>\n                          </div>\n                          {selectedBookings.includes(booking.id) && (\n                            <CheckCircle className=\"h-4 w-4 text-primary\" />\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {availableBookings.length === 0 && selectedDate && (\n                <div className=\"text-center p-4 text-muted-foreground\">\n                  No approved bookings with coordinates found for this date\n                </div>\n              )}\n\n              <Button \n                onClick={optimizeRoute} \n                disabled={selectedBookings.length < 2 || optimizing}\n                className=\"w-full\"\n              >\n                {optimizing ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Optimizing Route...\n                  </>\n                ) : (\n                  <>\n                    <Navigation className=\"h-4 w-4 mr-2\" />\n                    Optimize Route\n                  </>\n                )}\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Optimization Results */}\n          {optimizationResult && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Optimization Results</CardTitle>\n                <CardDescription>\n                  Route optimization completed with significant improvements\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {/* Original Route */}\n                  <div>\n                    <h4 className=\"font-medium mb-3\">Original Route</h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span>Total Distance:</span>\n                        <span>{formatDistance(optimizationResult.originalRoute.totalDistance)}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Total Time:</span>\n                        <span>{formatTime(Math.round(optimizationResult.originalRoute.totalDuration / 60))}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Fuel Cost:</span>\n                        <span>${optimizationResult.originalRoute.estimatedFuelCost}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Optimized Route */}\n                  <div>\n                    <h4 className=\"font-medium mb-3\">Optimized Route</h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span>Total Distance:</span>\n                        <span>{formatDistance(optimizationResult.optimizedRoute.totalDistance)}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Total Time:</span>\n                        <span>{formatTime(Math.round(optimizationResult.optimizedRoute.totalDuration / 60))}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Fuel Cost:</span>\n                        <span>${optimizationResult.optimizedRoute.estimatedFuelCost}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Savings */}\n                <div className=\"mt-6 p-4 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                  <h4 className=\"font-medium mb-3 text-green-800 dark:text-green-200\">Savings Summary</h4>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                    <div className=\"text-center\">\n                      <div className=\"font-medium text-green-600\">\n                        {optimizationResult.savings.timeSavedMinutes} min\n                      </div>\n                      <div className=\"text-green-700 dark:text-green-300\">Time Saved</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"font-medium text-green-600\">\n                        {optimizationResult.savings.distanceSavedMiles} mi\n                      </div>\n                      <div className=\"text-green-700 dark:text-green-300\">Distance Saved</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"font-medium text-green-600\">\n                        ${optimizationResult.savings.fuelSavings.dollars}\n                      </div>\n                      <div className=\"text-green-700 dark:text-green-300\">Fuel Savings</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"font-medium text-green-600\">\n                        {optimizationResult.savings.carbonSavings.pounds} lbs\n                      </div>\n                      <div className=\"text-green-700 dark:text-green-300\">COâ‚‚ Saved</div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"flex items-center space-x-2 mt-6\">\n                  <Button \n                    onClick={() => acceptOptimization(optimizationResult.optimizationId)}\n                  >\n                    <CheckCircle className=\"h-4 w-4 mr-2\" />\n                    Accept & Apply\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setOptimizationResult(null)}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Route Analytics */}\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Clock className=\"h-5 w-5\" />\n                  <span>Time Efficiency</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">24%</div>\n                <div className=\"text-sm text-muted-foreground\">Average time savings</div>\n                <div className=\"text-xs text-green-600 mt-1\">+5% vs last month</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Fuel className=\"h-5 w-5\" />\n                  <span>Fuel Efficiency</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">$127</div>\n                <div className=\"text-sm text-muted-foreground\">Monthly fuel savings</div>\n                <div className=\"text-xs text-green-600 mt-1\">18.3 gallons saved</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Leaf className=\"h-5 w-5\" />\n                  <span>Carbon Impact</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">163 lbs</div>\n                <div className=\"text-sm text-muted-foreground\">COâ‚‚ emissions saved</div>\n                <div className=\"text-xs text-green-600 mt-1\">Monthly reduction</div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}"