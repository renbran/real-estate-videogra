import React, { useState, useEffect, useCallback } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Upload, Download, Trash2, File, Image, Video, FileText, Search, Filter, Cloud } from 'lucide-react';\nimport { useDropzone } from 'react-dropzone';\nimport { toast } from 'sonner';\n\ninterface FileItem {\n  id: string;\n  filename: string;\n  original_filename: string;\n  file_size: number;\n  mime_type: string;\n  download_count: number;\n  uploaded_at: string;\n  last_accessed?: string;\n  booking_number?: string;\n}\n\ninterface StorageUsage {\n  total_files: number;\n  total_size_gb: number;\n  max_storage_gb: number;\n  usage_percentage: number;\n  remaining_gb: number;\n  image_count: number;\n  video_count: number;\n  document_count: number;\n  total_downloads: number;\n}\n\nexport function FileManager() {\n  const [files, setFiles] = useState<FileItem[]>([]);\n  const [storageUsage, setStorageUsage] = useState<StorageUsage | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [uploading, setUploading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [fileTypeFilter, setFileTypeFilter] = useState('all');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [selectedFiles, setSelectedFiles] = useState<Set<string>>(new Set());\n  const [uploadProgress, setUploadProgress] = useState(0);\n\n  useEffect(() => {\n    fetchFiles();\n    fetchStorageUsage();\n  }, [currentPage, fileTypeFilter]);\n\n  const fetchFiles = async () => {\n    try {\n      setLoading(true);\n      const params = new URLSearchParams({\n        page: currentPage.toString(),\n        limit: '20',\n      });\n\n      if (fileTypeFilter !== 'all') {\n        params.append('fileType', fileTypeFilter);\n      }\n\n      const response = await fetch(`/api/files/my-files?${params}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setFiles(data.data.files);\n        setTotalPages(data.data.pagination.pages);\n      } else {\n        toast.error('Failed to load files');\n      }\n    } catch (error) {\n      console.error('Files fetch error:', error);\n      toast.error('Error loading files');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchStorageUsage = async () => {\n    try {\n      const response = await fetch('/api/files/storage/usage', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setStorageUsage(data.data);\n      }\n    } catch (error) {\n      console.error('Storage usage fetch error:', error);\n    }\n  };\n\n  const onDrop = useCallback(async (acceptedFiles: File[]) => {\n    if (acceptedFiles.length === 0) return;\n\n    try {\n      setUploading(true);\n      setUploadProgress(0);\n\n      const formData = new FormData();\n      acceptedFiles.forEach(file => {\n        formData.append('files', file);\n      });\n\n      const xhr = new XMLHttpRequest();\n      \n      xhr.upload.addEventListener('progress', (event) => {\n        if (event.lengthComputable) {\n          const progress = (event.loaded / event.total) * 100;\n          setUploadProgress(progress);\n        }\n      });\n\n      xhr.onload = () => {\n        if (xhr.status === 200) {\n          const response = JSON.parse(xhr.responseText);\n          toast.success(`${response.data.totalUploaded} files uploaded successfully`);\n          fetchFiles();\n          fetchStorageUsage();\n        } else {\n          toast.error('Upload failed');\n        }\n        setUploading(false);\n        setUploadProgress(0);\n      };\n\n      xhr.onerror = () => {\n        toast.error('Upload failed');\n        setUploading(false);\n        setUploadProgress(0);\n      };\n\n      xhr.open('POST', '/api/files/upload');\n      xhr.setRequestHeader('Authorization', `Bearer ${localStorage.getItem('token')}`);\n      xhr.send(formData);\n\n    } catch (error) {\n      console.error('Upload error:', error);\n      toast.error('Upload failed');\n      setUploading(false);\n      setUploadProgress(0);\n    }\n  }, []);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'image/*': ['.jpeg', '.jpg', '.png', '.gif', '.webp'],\n      'video/*': ['.mp4', '.mov', '.avi', '.mkv'],\n      'application/pdf': ['.pdf'],\n      'application/msword': ['.doc'],\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'],\n      'text/plain': ['.txt'],\n      'application/zip': ['.zip'],\n      'application/x-rar-compressed': ['.rar']\n    },\n    maxSize: 100 * 1024 * 1024, // 100MB\n    disabled: uploading\n  });\n\n  const downloadFile = async (fileId: string, filename: string) => {\n    try {\n      const response = await fetch(`/api/files/download/${fileId}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n\n      if (response.ok) {\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = filename;\n        a.click();\n        window.URL.revokeObjectURL(url);\n        \n        // Refresh the files list to update download count\n        fetchFiles();\n      } else {\n        toast.error('Download failed');\n      }\n    } catch (error) {\n      console.error('Download error:', error);\n      toast.error('Download failed');\n    }\n  };\n\n  const deleteFile = async (fileId: string) => {\n    if (!confirm('Are you sure you want to delete this file?')) return;\n\n    try {\n      const response = await fetch(`/api/files/${fileId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n\n      if (response.ok) {\n        toast.success('File deleted successfully');\n        fetchFiles();\n        fetchStorageUsage();\n      } else {\n        toast.error('Delete failed');\n      }\n    } catch (error) {\n      console.error('Delete error:', error);\n      toast.error('Delete failed');\n    }\n  };\n\n  const getFileIcon = (mimeType: string) => {\n    if (mimeType.startsWith('image/')) return <Image className=\"h-4 w-4\" />;\n    if (mimeType.startsWith('video/')) return <Video className=\"h-4 w-4\" />;\n    if (mimeType.includes('pdf') || mimeType.includes('document') || mimeType.includes('text')) {\n      return <FileText className=\"h-4 w-4\" />;\n    }\n    return <File className=\"h-4 w-4\" />;\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const filteredFiles = files.filter(file => {\n    const matchesSearch = file.original_filename.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesSearch;\n  });\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight\">File Manager</h1>\n          <p className=\"text-muted-foreground\">\n            Upload, manage, and organize your files\n          </p>\n        </div>\n      </div>\n\n      {/* Storage Usage */}\n      {storageUsage && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Cloud className=\"h-5 w-5\" />\n              <span>Storage Usage</span>\n            </CardTitle>\n            <CardDescription>\n              {storageUsage.total_files} files â€¢ {storageUsage.total_size_gb} GB used of {storageUsage.max_storage_gb} GB\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div>\n                <div className=\"flex justify-between text-sm mb-2\">\n                  <span>Used Storage</span>\n                  <span>{storageUsage.usage_percentage.toFixed(1)}%</span>\n                </div>\n                <Progress value={storageUsage.usage_percentage} className=\"h-2\" />\n              </div>\n              \n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                <div>\n                  <div className=\"font-medium\">Images</div>\n                  <div className=\"text-muted-foreground\">{storageUsage.image_count} files</div>\n                </div>\n                <div>\n                  <div className=\"font-medium\">Videos</div>\n                  <div className=\"text-muted-foreground\">{storageUsage.video_count} files</div>\n                </div>\n                <div>\n                  <div className=\"font-medium\">Documents</div>\n                  <div className=\"text-muted-foreground\">{storageUsage.document_count} files</div>\n                </div>\n                <div>\n                  <div className=\"font-medium\">Downloads</div>\n                  <div className=\"text-muted-foreground\">{storageUsage.total_downloads} total</div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <Tabs defaultValue=\"files\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"files\">My Files</TabsTrigger>\n          <TabsTrigger value=\"upload\">Upload Files</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"upload\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Upload Files</CardTitle>\n              <CardDescription>\n                Drag and drop files here, or click to browse. Max file size: 100MB\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div\n                {...getRootProps()}\n                className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${\n                  isDragActive ? 'border-primary bg-primary/5' : 'border-muted-foreground/25'\n                } ${uploading ? 'pointer-events-none opacity-50' : ''}`}\n              >\n                <input {...getInputProps()} />\n                <Upload className=\"h-8 w-8 mx-auto mb-4 text-muted-foreground\" />\n                {uploading ? (\n                  <div className=\"space-y-2\">\n                    <p>Uploading files...</p>\n                    <Progress value={uploadProgress} className=\"w-64 mx-auto\" />\n                    <p className=\"text-sm text-muted-foreground\">{uploadProgress.toFixed(0)}%</p>\n                  </div>\n                ) : isDragActive ? (\n                  <p>Drop the files here...</p>\n                ) : (\n                  <div className=\"space-y-2\">\n                    <p>Drag & drop files here, or <span className=\"text-primary\">browse</span></p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Supports: Images, Videos, PDFs, Documents, Archives\n                    </p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"files\" className=\"space-y-4\">\n          {/* Filters */}\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input\n                  placeholder=\"Search files...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <Select value={fileTypeFilter} onValueChange={setFileTypeFilter}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Files</SelectItem>\n                <SelectItem value=\"image\">Images</SelectItem>\n                <SelectItem value=\"video\">Videos</SelectItem>\n                <SelectItem value=\"application\">Documents</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Files List */}\n          <Card>\n            <CardContent className=\"p-0\">\n              {loading ? (\n                <div className=\"flex items-center justify-center p-8\">\n                  <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n                  <span className=\"ml-2\">Loading files...</span>\n                </div>\n              ) : filteredFiles.length === 0 ? (\n                <div className=\"text-center p-8\">\n                  <File className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                  <p className=\"text-muted-foreground\">No files found</p>\n                  {searchTerm && (\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => setSearchTerm('')}\n                      className=\"mt-2\"\n                    >\n                      Clear search\n                    </Button>\n                  )}\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Name</TableHead>\n                      <TableHead>Size</TableHead>\n                      <TableHead>Type</TableHead>\n                      <TableHead>Uploaded</TableHead>\n                      <TableHead>Downloads</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredFiles.map((file) => (\n                      <TableRow key={file.id}>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            {getFileIcon(file.mime_type)}\n                            <div>\n                              <div className=\"font-medium\">{file.original_filename}</div>\n                              {file.booking_number && (\n                                <Badge variant=\"secondary\" className=\"text-xs\">\n                                  {file.booking_number}\n                                </Badge>\n                              )}\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>{formatFileSize(file.file_size)}</TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">\n                            {file.mime_type.split('/')[1].toUpperCase()}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>{formatDate(file.uploaded_at)}</TableCell>\n                        <TableCell>\n                          <Badge variant=\"secondary\">{file.download_count}</Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => downloadFile(file.id, file.original_filename)}\n                            >\n                              <Download className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => deleteFile(file.id)}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Pagination */}\n          {totalPages > 1 && (\n            <div className=\"flex justify-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                disabled={currentPage === 1}\n              >\n                Previous\n              </Button>\n              <span className=\"flex items-center px-3\">\n                Page {currentPage} of {totalPages}\n              </span>\n              <Button\n                variant=\"outline\"\n                onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n                disabled={currentPage === totalPages}\n              >\n                Next\n              </Button>\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}"