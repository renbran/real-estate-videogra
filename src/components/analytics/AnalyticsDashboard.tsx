import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';\nimport { Calendar, TrendingUp, Users, MapPin, Clock, DollarSign, Award, FileText } from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface AnalyticsData {\n  bookingStats: {\n    total_bookings: number;\n    completed_bookings: number;\n    pending_bookings: number;\n    cancelled_bookings: number;\n    avg_priority_score: number;\n    avg_completion_days: number;\n  };\n  agentUtilization: Array<{\n    name: string;\n    monthly_quota: number;\n    monthly_used: number;\n    performance_score: number;\n    bookings_count: number;\n    utilization_percentage: number;\n  }>;\n  geographicData: Array<{\n    geographic_zone: string;\n    booking_count: number;\n    avg_priority: number;\n  }>;\n  trendData: Array<{\n    booking_date: string;\n    bookings_created: number;\n    bookings_completed: number;\n  }>;\n  performanceMetrics: Array<{\n    metric_type: string;\n    avg_value: number;\n    max_value: number;\n    min_value: number;\n    data_points: number;\n  }>;\n}\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\n\nexport function AnalyticsDashboard() {\n  const [analyticsData, setAnalyticsData] = useState<AnalyticsData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [timeframe, setTimeframe] = useState('30');\n  const [activeTab, setActiveTab] = useState('overview');\n\n  useEffect(() => {\n    fetchAnalyticsData();\n  }, [timeframe]);\n\n  const fetchAnalyticsData = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(`/api/analytics/dashboard?timeframe=${timeframe}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setAnalyticsData(data.data);\n      } else {\n        toast.error('Failed to load analytics data');\n      }\n    } catch (error) {\n      console.error('Analytics fetch error:', error);\n      toast.error('Error loading analytics');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(value);\n  };\n\n  const formatPercentage = (value: number) => {\n    return `${value.toFixed(1)}%`;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading analytics...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!analyticsData) {\n    return (\n      <div className=\"text-center p-8\">\n        <p className=\"text-muted-foreground\">No analytics data available</p>\n        <Button onClick={fetchAnalyticsData} className=\"mt-4\">\n          Retry\n        </Button>\n      </div>\n    );\n  }\n\n  const completionRate = analyticsData.bookingStats.total_bookings > 0 \n    ? (analyticsData.bookingStats.completed_bookings / analyticsData.bookingStats.total_bookings) * 100\n    : 0;\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight\">Analytics Dashboard</h1>\n          <p className=\"text-muted-foreground\">\n            Performance insights and business metrics\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Select value={timeframe} onValueChange={setTimeframe}>\n            <SelectTrigger className=\"w-40\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"7\">Last 7 days</SelectItem>\n              <SelectItem value=\"30\">Last 30 days</SelectItem>\n              <SelectItem value=\"90\">Last 90 days</SelectItem>\n              <SelectItem value=\"365\">Last year</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button onClick={fetchAnalyticsData} variant=\"outline\">\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Key Metrics Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Bookings</CardTitle>\n            <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analyticsData.bookingStats.total_bookings}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Last {timeframe} days\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Completion Rate</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{formatPercentage(completionRate)}</div>\n            <Progress value={completionRate} className=\"mt-2\" />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Avg Priority Score</CardTitle>\n            <Award className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {analyticsData.bookingStats.avg_priority_score?.toFixed(1) || '0'}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Out of 100\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Avg Completion</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {analyticsData.bookingStats.avg_completion_days?.toFixed(1) || '0'}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Days\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Analytics Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"agents\">Agent Performance</TabsTrigger>\n          <TabsTrigger value=\"geographic\">Geographic</TabsTrigger>\n          <TabsTrigger value=\"trends\">Trends</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Booking Status Distribution */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Booking Status Distribution</CardTitle>\n                <CardDescription>Breakdown of booking statuses</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={[\n                        { name: 'Completed', value: analyticsData.bookingStats.completed_bookings },\n                        { name: 'Pending', value: analyticsData.bookingStats.pending_bookings },\n                        { name: 'Cancelled', value: analyticsData.bookingStats.cancelled_bookings },\n                      ]}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                    >\n                      {analyticsData.bookingStats && COLORS.map((color, index) => (\n                        <Cell key={`cell-${index}`} fill={color} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Daily Trends */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Daily Booking Trends</CardTitle>\n                <CardDescription>Bookings created vs completed over time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={analyticsData.trendData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"booking_date\" \n                      tickFormatter={(value) => new Date(value).toLocaleDateString()}\n                    />\n                    <YAxis />\n                    <Tooltip \n                      labelFormatter={(value) => new Date(value).toLocaleDateString()}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"bookings_created\" \n                      stroke=\"#8884d8\" \n                      name=\"Created\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"bookings_completed\" \n                      stroke=\"#82ca9d\" \n                      name=\"Completed\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"agents\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Agent Utilization</CardTitle>\n              <CardDescription>Agent performance and quota usage</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {analyticsData.agentUtilization.map((agent, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium\">{agent.name}</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {agent.monthly_used} / {agent.monthly_quota} bookings\n                      </div>\n                      <Progress \n                        value={agent.utilization_percentage} \n                        className=\"mt-2 w-48\"\n                      />\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge \n                        variant={agent.utilization_percentage >= 80 ? 'default' : 'secondary'}\n                      >\n                        {formatPercentage(agent.utilization_percentage)}\n                      </Badge>\n                      <div className=\"text-sm text-muted-foreground mt-1\">\n                        Score: {agent.performance_score}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"geographic\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Geographic Distribution</CardTitle>\n              <CardDescription>Bookings by geographic zone</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={400}>\n                <BarChart data={analyticsData.geographicData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"geographic_zone\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Bar dataKey=\"booking_count\" fill=\"#8884d8\" name=\"Bookings\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"trends\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Performance Metrics</CardTitle>\n                <CardDescription>Key performance indicators over time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {analyticsData.performanceMetrics.map((metric, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium capitalize\">\n                          {metric.metric_type.replace('_', ' ')}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {metric.data_points} data points\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-medium\">{metric.avg_value.toFixed(2)}</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          Range: {metric.min_value.toFixed(1)} - {metric.max_value.toFixed(1)}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>System Health</CardTitle>\n                <CardDescription>Platform performance indicators</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span>System Uptime</span>\n                    <Badge variant=\"default\">99.9%</Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Average Response Time</span>\n                    <Badge variant=\"secondary\">120ms</Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Data Processing</span>\n                    <Badge variant=\"default\">Real-time</Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>API Calls Today</span>\n                    <Badge variant=\"outline\">1,247</Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}"